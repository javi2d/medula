


class References:
	
	auto_proxy = boolKnob( 'auto find proxy file' , True , flags = 'STARTLINE' )
	
	sep = sepKnob()
	
	#secondary_ref = fileKnob( 'secondary reference' , '' )
	
	switch_source_ref = bttnKnob( 'switch src ref' , flags = 'STARTLINE' )
	source_reference = fileKnob( '' , '' , clearflags = 'STARTLINE' )
	
	create_target_ref = bttnKnob( 'create trg ref' , flags = 'STARTLINE' )
	target_reference = fileKnob( '' , '' , clearflags = 'STARTLINE' )
	
	sep2 = sepKnob()
	
	make_green  = bttnKnob( 'make green' , flags = 'STARTLINE' )
	
	sep3 = sepKnob()
	
	#show_extra_info = boolKnob( 'show extra info' , True , flags = 'STARTLINE' )
	
	#show_sources_extra_info = boolKnob( 'show sources extra info' , False , flags = 'STARTLINE' )



#def colorize_node( this ):
#	
#	node_color = brain.Lib.path.path_color( this )
#	
#	this.KNOBS.tile_color.setValue( node_color )
#	
#	#print 'Color Change into:' , node_color , this.NODE.name()



def switch_source_ref( this ):

	if this.VALUES.source_reference:
		
		src_value   = this.VALUES.source_reference
		file_value  = this.VALUES.file

		this.KNOBS.source_reference.fromUserText( file_value )
		this.KNOBS.file.fromUserText( '%s %s-%s' % ( src_value , this.VALUES.first , this.VALUES.last ) )
	
	#this.NODE.redraw()
	
	space.file( this )


def make_green( this ):

	pass


	

def onCreate( this ):
	
	#print '> On Create'
	
	brain.Lib.path.colorize_node( this.NODE )  #colorize_node( this )
	
	#print '<'
	

def file( this ):
	
	value = brain.Lib.path.normalize_padding( this.VALUES.file )
	
	if value:
	
		this.KNOBS.file.setValue( value  )

		if this.VALUES( 'auto_proxy' , None ):
		
			name = this.VALUES.file.split('.')[0].split('%')[0]
		
			proxy_name = brain.Lib.path.valid_proxy_from_file( this )
			
			this.KNOBS.proxy.setValue( proxy_name )

	#print '<'
	
	brain.Lib.path.colorize_node( this.NODE )  #colorize_node( this )
	

#def proxy( this ):
#	
#	value = brain.Lib.path.normalize_padding( this.VALUES.proxy )
#	
#	if value:
#		
#		file_value = value.replace( '.PROXY' , '' )
#		
#		tmp = file_value
#		
#		if '%' in file_value:
#
#			tmp =  file_value % this.VALUES.first
#		
#		
#		if os.path.exists( tmp ):
#		
#			this.KNOBS.file.setValue( file_value )
#	
#	
#	print 'PROXY KNOB CHANGED'
#	
#	colorize_node( this )
	
	
	
	



# Up version and down version triggers this callbacks
	
def autolabel( this ):
	
	label = '<center>%s\n' % this.NODE.name()

	#label += '%sx%s\n' % ( this.NODE.width() , this.NODE.height() )
	
	file_metadata = this.NODE.metadata('input/filename' , nuke.frame() )

	basename_font = '<font color="Black" size=4>%s</font>\n'

	if file_metadata:
	
		label += basename_font % os.path.basename( file_metadata  ) #
		
	else:
		
		label += basename_font % os.path.basename( this.VALUES.file  )
	
	
	label += '<b><font color="Black" size=5 >%s</font></b>\n' % ( 1 + this.NODE.lastFrame() - this.NODE.firstFrame() )
	
	host_resource = brain.Lib.sources.host_resource(  this.VALUES.file ) 
    
	if host_resource:
		
		host_resource = [ x.upper() for x in host_resource ]
		
		label += '%s' % '/'.join( host_resource )
    
	else:
    
		label += 'UNBOUND'

	return label
		



def target_reference( this ):
	
	print 'Target REF Modified'



	

	
	
	


