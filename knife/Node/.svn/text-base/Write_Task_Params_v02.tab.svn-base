
import shutil


class taskParams:
	
	tsk_task = fileKnob( 'task' , '' )

	tsk_mail_recipients = strKnob( 'mail' )
	
	tsk_send_mail = boolKnob( 'send mail' , True )
	
	tsk_sep = sepKnob( '' )
	
	tsk_sep1 = sepKnob( '' )
	
	tsk_target_host = enumKnob( 'task in' , [ 'local' , 'farm' ] )
	
	tsk_frame_order = enumKnob( '' , ['linear' , 'reversed' , 'preview' , 'random'] , clearflags = 'STARTLINE')

	tsk_clear_task = bttnKnob( 'clear' ) #, 
	
	tsk_send_task = bttnKnob( 'send' ) #, 
 
	tsk_pause_task = bttnKnob( 'pause' )
	
	tsk_cancel_task = bttnKnob( 'cancel' )
	
	
	tsk_sep2 = sepKnob( '' )
	
	
	tsk_review_task = bttnKnob( 'review'  ) #, 

	

def onCreate( this ):
	
	#tsk_refresh( this )
	
	if not os.path.isfile( this.VALUES.tsk_task ):
		
		this.KNOBS.tsk_task.setValue('')
		

def _task_stats( this ):

	task_path = this.VALUES.tsk_task

		
	worker_path = task_path.replace( '.task' , '.worker' )

	analize_worker = False
	
	
	DONE_FRAMES_LEN = 0
	
	TODO_FRAMES_LEN = 0
	
	PERCENT_DONE = '0%'
	
	

	if task_path and os.path.isfile( task_path ):
		
		if os.path.isfile( worker_path ):
			
			analize_worker = True
			
			LABEL = 'Processing'
			
		else:
			
			LABEL = 'Queued'
						
			
	elif task_path and not os.path.isfile( task_path ):
		
		import glob	
		matches = glob.glob( '%s.*' % task_path )
		
		if matches:

			if os.path.isfile( worker_path ):
			
				analize_worker = True	
			
			LABEL = matches[0][ len(task_path) + 1 : ].upper()
			
		else:
			
			LABEL = None
			
	
	else: # not task_path
		
		LABEL = None
		
	
	if analize_worker:
		
		worker = Brain() << sh( worker_path )
		
		DONE_FRAMES_LEN = len( worker( 'done_frames' , [] ) )
		
		TODO_FRAMES_LEN = len( worker( 'todo_frames' , [] ) )
		
		PERCENT_DONE = ( str( DONE_FRAMES_LEN*100/TODO_FRAMES_LEN ) if DONE_FRAMES_LEN > 0   else  '0' ) + '%'   
		

	return  LABEL ,  DONE_FRAMES_LEN , TODO_FRAMES_LEN , PERCENT_DONE
		




def tsk_clear_task( this ):
	
	
	
	task_path = this.VALUES.tsk_task
	
	if task_path and not os.path.isfile( task_path ):
		
		this.KNOBS.tsk_task.setValue('')
		this.KNOBS.tsk_send_task.clearFlag( nuke.DISABLED )
		

def tsk_cancel_task( this ):
	
	
	
	task_path = this.VALUES.tsk_task
	
	if task_path and os.path.isfile( task_path ):
		
		shutil.move( task_path , task_path.replace( '.task' , '.task.user_cancelled') )
		
	this.KNOBS.tsk_task.setValue('')
	this.KNOBS.tsk_send_task.clearFlag( nuke.DISABLED )
	
	brain.Lib.mWrites.build_path( this )
	

def tsk_send_task( this ):
	
	
	
	brain.Lib.mWrites.build_path( this )
	
	task_path = this.VALUES.tsk_task
	
	if not task_path:
	
		target = this.VALUES.tsk_target_host
	
		if target == 'local':
		
			target_shell = ush( '../__tasks'  )
	
		elif target == 'farm' :
			
			target_shell = ush( '.../__tasks'  )
	
		
		result = brain.Lib.task.append_render_output_and_task( this.NODE , target_shell ) 
		
		this.KNOBS.tsk_task.setValue( result )
		this.KNOBS.tsk_send_task.setFlag( nuke.DISABLED )
		
		if result:
			
			print '\n>> Sucessful task creation: %s ' % result
			
		else:
			
			raise RuntimeError( '\n\nError creating task.' )
	
	
def autolabel( this ):
	
	task_path = this.VALUES.tsk_task
	
	if task_path:
	
		LABEL , DONE_FRAMES_LEN , TODO_FRAMES_LEN , PERCENT_DONE = _task_stats( this )
		
		if LABEL:
			
			nuke.frame()
			
			info = '\n%s of %s ( %s )' % (  DONE_FRAMES_LEN , TODO_FRAMES_LEN , PERCENT_DONE )
			
			return '<center><font size="10" color="red">%s</font><font size="5" color="green">%s</font></center>' % ( LABEL , info )
	

		
		
	
	
	