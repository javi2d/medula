


# IMPLEMENT A CURRENT TIMECODE BASED ON AUTOLABEL 

no_timecode = '<font color = "Red">00:00:00:00 00:00:00:00</font>'
timecode = '<font color = "Green">%s %s</font>'


class TCRange:  
	
	TCR_timecode = txtKnob( 'tc'  , no_timecode ) #, 
	
	TCR_in_frame = linkKnob( 'fc', 'first_frame' ) #intKnob( 'frameCode' , 0 )
	TCR_out_frame = linkKnob( '', 'last_frame' , clearflags = 'STARTLINE'  )  #intKnob( '' , 0 , clearflags = 'STARTLINE' )
	TCR_dur = intKnob( '', 0 , clearflags = 'STARTLINE'  )
	TCR_dur_mode = enumKnob( '', ['tail' , 'head'] , clearflags = 'STARTLINE'  )
	
	TCR_set_in_frame = bttnKnob( 'in' , flags = 'STARTLINE')
	TCR_set_out_frame = bttnKnob( 'out' )
	TCR_reset = linkKnob( 'reset', 'reset' , clearflags = 'STARTLINE' )  #
	
	TCR_show_tcode = boolKnob( 'show timeCode' , False , flags='STARTLINE' )




# SYSTEM CB


#def onCreate( this ):
#	
#	_update_timecode( this )


def reset( this ):

	input0 = this.NODE.input(0)
	
	print this.NODE.input(0)
	
	if input0:
		
		ff = input0.firstFrame()
		lf = input0.lastFrame()
	
	else:
		ff = this.ROOT.NODE.firstFrame()
		lf = this.ROOT.NODE.lastFrame()
		
	this.KNOBS.first_frame.setValue( ff )
	this.KNOBS.last_frame.setValue( lf )
	this.KNOBS.TCR_dur.setValue( 1 + lf - ff )

	_update_timecode( this )



def knobChanged( this ):

	knob_name = nuke.thisKnob().name()
	
	if knob_name in 'selected xpos ypos'.split():
		return
	
	elif knob_name.startswith( 'TCR_' ):
		
		print 'Updating TimeCode with knob:' , knob_name
		
		_update_timecode( this )
		
		
	
	
	#


def calculate_duration( this ):
	
	duration = int( 1 + this.VALUES.last_frame - this.VALUES.first_frame )
	
	this.KNOBS.TCR_dur.setValue( duration )
	
	print duration
	

def first_frame( this ):
	
	calculate_duration( this )
	
	
def last_frame( this ):

	calculate_duration( this )

	
def TCR_dur( this ):
	
	new_duration = this.VALUES.TCR_dur
	
	if new_duration == 0:
		
		calculate_duration( this )
	
	else:

		ff = this.VALUES.first_frame
		lf = this.VALUES.last_frame
	
		mode = this.VALUES.TCR_dur_mode
	
		old_duration = 1 + lf - ff 
	
		if mode == 'tail':
		
			this.KNOBS.last_frame.setValue( lf + ( new_duration - old_duration ) )
			
		elif mode == 'head':
		
			this.KNOBS.first_frame.setValue( ff - ( new_duration - old_duration ) )
		





def _update_timecode( this ):
	
	has_timecode = this.NODE.metadata(  'r3d/absolute_time_code' )
	
	if has_timecode:
	
		tc_in = this.NODE.metadata(  'r3d/absolute_time_code' , this.VALUES.first_frame )
		tc_out = this.NODE.metadata(  'r3d/absolute_time_code' , this.VALUES.last_frame )
			
		msg = timecode % ( tc_in , tc_out )
	
	else:
		
		msg = '-----'
		
	this.KNOBS.TCR_timecode.setValue( msg )
	


def TCR_set_in_frame( this ):

	this.KNOBS.first_frame.setValue( nuke.frame() )
	
	calculate_duration( this )
	

def TCR_set_out_frame( this ):

	this.KNOBS.last_frame.setValue( nuke.frame() )
	
	calculate_duration( this )
	
	
def autolabel( this ):
	
	#print 'DBG_FrameRange_Read'
	
	ff = this.VALUES.first_frame
	lf = this.VALUES.last_frame
	
	duration = 1+lf-ff 
	
	if this.VALUES.TCR_dur == 0:
		
		this.KNOBS.TCR_dur.setValue( int( duration ) )
	
	to_return = '<center>%s\n %i-%i <font size = 5>\n%i</font>\n%sx%s' % ( this.NODE.name() , ff , lf , duration , this.NODE.width() , this.NODE.height()  )
	
	if this.VALUES.TCR_show_tcode:
		
		tc_in = this.NODE.metadata(  'r3d/absolute_time_code' , this.VALUES.first_frame )
		tc_out = this.NODE.metadata(  'r3d/absolute_time_code' , this.VALUES.last_frame )
		
		to_return += '<b><font size = 5 color = "White">\n%s\n%s</font></center></b>' % ( tc_in , tc_out )
		
	else:
		
		to_return += '\n</font></center>'
		

	return to_return
	

	



	
