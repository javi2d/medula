

TABS = [ 'Write.node', 'Write_Management_v07.tab' , 'Write_Convertor_v01.tab' , 'Write_Task_Params_v02.tab'   ] #,  

DEFAULTS = {

'channels' : 'rgba' ,


}


def onUserCreate( this ):

	# To use a write node the user is forced to save the script
	# This can be replaced with the Script

	if not this.SCRIPT_PATH : #nuke.tcl('value root.name'):

		brain.Lib.script.saveScript()
	
	
def beforeRender( this ):
	
	# Empty Write Connected directly to a read Node
	# Autoinject proxy name of the read node

	brain.total_render_time = time.time()
	
	read_node = this( NODE = this.NODE.input(0) )
	
	# Auto Proxy Write
	
	if read_node.NODE.Class() == 'Read' and read_node.VALUES.file:
		
		# FULL AUTO WRITE
		
		if not this.VALUES.file and not this.VALUES.proxy:	
			
			print '>> PROXY AUTO WRITE for node [ %s ]' % this.NODE.name()
	
			#this.KNOBS.file.fromUserText( read_node.VALUES.file )
			
			if read_node.VALUES.proxy:			
				
				this.KNOBS.proxy.fromScript( '%s' % read_node.VALUES.proxy ) #this.KNOBS.proxy.fromUserText( read_node.VALUES.proxy )
	
				read_node.KNOBS.proxy.setValue( '' )
							
			else:
				
				# OPTI

				this.KNOBS.proxy.fromScript( '%s' % brain.Lib.path.proxy_from_file( read_node.VALUES.file ) )

			#this.KNOBS.file.setValue( '' )
		
		# FORCE REPROXY
		
		elif not this.VALUES.file and this.VALUES.proxy:
			
			if this.VALUES.proxy == read_node.VALUES.proxy:
			
				read_node.KNOBS.proxy.setValue( '' )
			

		else:
			
			# REGULAR RENDER DIRECTLY FROM A READ NODE
			
			print '>> REGULAR RENDER, DIRECTLY FROM A READ NODE'
	
	
	# get target render dirname
	
	if not this.ROOT.VALUES.proxy: # PROXY MODE , NOT PROXY KNOB
		
		dirname , basename = os.path.split( this.VALUES.file ) # this.VALUES.file )	nuke.tcl( 'value file' )
	
	else:
		
		dirname , basename = os.path.split( this.VALUES.proxy )
	
	# autocreate target render dirname
	
	if not os.path.exists( dirname ):

		sh( dirname )
		
		print '>> [ AUTO FOLDER CREATION ] : ' , dirname
	

	brain.Lib.task.append_render_output( this.NODE )
	
	brain.Lib.script.saveScript() # this will upgrade subversion, in fact render any node will update subversion
	
	
	if basename:
		
		# Only copy if target render exist

		render_name = basename.split('.')[0]
		brain.Lib.script.copyScript( '_renderScripts'  , script_name = render_name + '.nk' )
				
	print '>> [ ABOUT TO RENDER ] : %s node on %s script' % ( this.NODE.name() , os.path.basename( this.ROOT.VALUES.name) )
		


def afterFrameRender( this ):
	
	print 'Frame Rendered :  script = %s , node = %s , frame = %s ' % ( os.path.basename( this.ROOT.VALUES.name) , this.NODE.name() , nuke.frame() )


def afterRender( this ):
	
	# Recover proxy file in Read Node
	
	print '\n>> Rendered All Frames in %.3f seconds\n' %  ( time.time() - brain.total_render_time )
	
	
	read_node = this( NODE = this.NODE.input(0) )
	
	if read_node.NODE.Class() == 'Read' and not this.VALUES.file and not read_node.VALUES.proxy:
		
		print '>> PROXY AUTO WRITE pushing proxy path for node [ %s ]' % read_node.NODE.name()

		read_node.KNOBS.proxy.fromUserText( this.VALUES.proxy )

	
def autolabel( this ):
		
	if not this.VALUES.file:
		
		output = '%s\n\n' % this.NODE.name()
		
		if this.VALUES.file_type == ' ':
			
			return  output + '(AUTO_PROXY)\n' 
			
		elif this.VALUES.file_type == 'mov':
			
			return  output + '(AUTO_QT)\n' 
			
	else:
		
		return ''
				
	




	

	
	