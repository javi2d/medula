



class Management:
	
	wm_category  = enumKnob( '' ,  [  ] ) 

	wm_label      = strKnob( '' , 'Untitled_%s' % this.HOSTLABEL , clearflags = 'STARTLINE' )
	
	wm_ext   = linkKnob( '' , 'file_type' , clearflags = 'STARTLINE')
	
	wm_colorspace  = linkKnob( '' , 'colorspace' , clearflags = 'STARTLINE')
	
	sep0   = sepKnob( ' ' )
	
	wm_channels    = linkKnob( '' , 'channels'  )
	

	sep1   = sepKnob()

	wm_folderize  = boolKnob( ' in folder' , True , flags = 'STARTLINE') #, flags = 'STARTLINE'
	wm_perversion  = boolKnob( ' per version' , True )
	wm_overwrite  = boolKnob( 'overwrite' , False )
	
	sep2 = sepKnob()
	
	wm_tree     = txtKnob( '' , '----'   )
	
	sep3 = sepKnob()
	
	wm_path_target = enumKnob( 'target'  , ['file' , 'both'] )  #, clearflags = 'STARTLINE' 
	
	wm_refresh = bttnKnob( 'refresh' )
	
	
	
	sep4 = sepKnob()
	
	wm_file_path = linkKnob( 'file' , 'file'  )
	
	wm_proxy_path = linkKnob( 'proxy' , 'proxy' )
	
	
	sep5 = sepKnob( ' ' )
	
	wm_render      = linkKnob( 'render' , 'Render' , flags = 'STARTLINE')
		
	#sep6 = sepKnob( ' ' )
	
	wm_user_path = strKnob( 'user' , '' , flags = 'INVISIBLE' )
	

	#sep7 = sepKnob( ' ' )


def onUserCreate( this ):
	
	#print 'Newly created Node'
	pass


def onCreate( this ):

	
	current_value = this.VALUES.wm_category
		
	categories = list(  [ 'disabled' ] + brain.Categories['names']  )
	
	value_is_digit = str(current_value).isdigit()
	
	if value_is_digit:
		
		this.KNOBS.wm_category.setValues( categories )	
		this.KNOBS.wm_category.setValue( 'disabled' )
		wm_category( this )
		
		
	elif current_value not in categories:
		
		print '\nWARNING!! Lost Category [ %s ] in node %s, disabling managed write for that node ' % ( current_value , this.NODE.name()  )
		
		this.KNOBS.wm_category.setValue( 'disabled' )
		this.KNOBS.wm_category.setValues( categories )
		wm_category( this )
	
	_safe_build_path( this )


def _isEnabled( this ):
	
	return ( False if this.VALUES.wm_category == 'disabled' else True )
	

def wm_category( this ):
	
	# Enable or Disable 
	
	for name in [ n for n in this.KNOBS['names'] if n.startswith('wm_') and not n == 'wm_category' ]:
    
		knob = this.KNOBS( name )	
		knob.setEnabled( _isEnabled( this ) )
	
	
	if not _isEnabled( this ):

		if this.VALUES.wm_user_path:
    
			this.KNOBS.file.fromScript( this.VALUES.wm_user_path )
			this.KNOBS.wm_user_path.setValue('')
	
	else:
		
		wm_folderize( this )


def file_type( this ):

	if this.VALUES.file_type == 'jpeg' and this.VALUES._jpeg_quality == .75 :
	
		this.KNOBS._jpeg_quality.setValue( 1. )

	_safe_build_path( this )

	

#def _refresh( this ):
#	
#	print 'Refreshing Node'
#	
#	nuke.executeInMainThreadWithResult( this.NODE.hideControlPanel )
#	nuke.executeInMainThreadWithResult( this.NODE.showControlPanel )
#	
#	return

	

def knobChanged( this ):
	
	#print 'DEBUG knobChanged' , this.KNOB.name()

	if this.KNOB.name() in 'showPanel wm_category wm_label wm_folderize wm_perversion wm_overwrite wm_refresh wm_path_target'.split():

		_safe_build_path( this )


def beforeRender( this ):
	
	print '\nRender Started, updating file_knobs for node [ %s ]' %  this.NODE.name()
	
	_safe_build_path( this )

# Este es el que da error	

def afterRender( this ):
	
	print '\nRender Finished, updating file_knobs for node [ %s ]' %  this.NODE.name()
	
	Core.thread( nuke.executeInMainThreadWithResult , ( this.KNOBS.wm_refresh.execute ) ).start()
	


def autolabel( this ):
	

	if _isEnabled( this ):
		
		Category = brain.Lib.mWrites.process_category( this )
		
		proxy_mode = this.ROOT.VALUES.proxy #nuke.tcl( 'value root.proxy' )

		filename = this.VALUES.proxy if proxy_mode else this.VALUES.file
		
		if filename:
			
			basename = os.path.basename( filename )
		
		else:
			
			if proxy_mode:
				
				basename = 'NO PROXY OUTPUT'
				
			else:
				
				basename = 'NO RENDER OUTPUT'
		
		asterisk = (  '*' if this.VALUES.wm_overwrite else '' )

		return '<center><font size=3>%s\n<b><font size=6 color= %s>%s%s</font>\n%s</b></font>\n(%s)</center>' % ( this.NODE.name() , Category.color , Category.category , asterisk , basename , this.VALUES.colorspace ) # 

	else:

		return None




#*************************************************************************************************
# New


	

def _safe_build_path( this , msg = None ):
	
	if _isEnabled( this ):
		
		if msg:
		
			print '\n%s, updating file_knobs for node [ %s ]' % ( msg , this.NODE.name() )
		
		brain.Lib.mWrites.build_path( this  )
	


def wm_folderize( this ):
	
	if _isEnabled( this ):
	
		if not this.VALUES.wm_folderize: 
		
			this.KNOBS.wm_perversion.setEnabled( False )
		
		else:
		
			this.KNOBS.wm_perversion.setEnabled( True )








	




		





