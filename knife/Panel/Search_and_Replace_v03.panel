

DEFAULT_LABEL = 'Untitled to Untitled'


#print 'DEBUG IN SEARCH AND REPLACE PANEL' , space['shell'].__path__


class User:
	
	bookmarks = enumKnob( 'bookmarks' , [' '*35])
	delete = bttnKnob( 'delete' )
	label = strKnob('' , DEFAULT_LABEL , clearflags = 'STARTLINE')
	save = bttnKnob( 'save' )
	
	sep = sepKnob()
	
	search_for = strKnob('search for')
	
	switch = bttnKnob( 'switch' , flags = 'STARTLINE') 
	
	replace = bttnKnob( 'replace'  )
	
	which_nodes = enumKnob( '' , 'all selected in_error'.split() ,  clearflags = 'STARTLINE' )
	
	
	info = txtKnob( '' , '---' , clearflags = 'STARTLINE')
	
	replace_with = fileKnob('replace with', '')

def knobChanged( this ):
	
	if this.KNOB.name() != 'replace':
		
		this.KNOBS.info.setValue( '---' )


def switch( this ):
	
	
	sf = this.VALUES.search_for
	rw = this.VALUES.replace_with	
	
	this.KNOBS.search_for.setValue( rw )
	this.KNOBS.replace_with.setValue( sf )
	

def delete( this ):
	
	value = this.VALUES.bookmarks
	
	if value == DEFAULT_LABEL.replace( '_' , ' ' ):
		
		return
	
	
	last_value = this.KNOBS.bookmarks.values()[-1]
	
	delattr( brain.Search_and_Replace , value )
	
	brain.Search_and_Replace >> local._user.Brain( 'Search_and_Replace.memory' )
	
	_fill_bookmarks( this )
	
	
	if value == last_value:
		
		last_value = this.KNOBS.bookmarks.values()[-1]
		this.KNOBS.bookmarks.setValue( last_value )
		
		bookmarks( this )

	
	
def save( this ):
	
	value = this.VALUES.label
	
	if value == DEFAULT_LABEL:
		
		return
	
	
	label = value.replace( ' ' , '_' )
	
	if label:
	
		setattr( brain.Search_and_Replace , label , ( this.VALUES.search_for ,  this.VALUES.replace_with ) )

		_fill_bookmarks( this )

		this.KNOBS.bookmarks.setValue( label )
		
		bookmarks( this )
		
		
	brain.Search_and_Replace >> local._user.Brain( 'Search_and_Replace.memory' )
	

def _fill_bookmarks( this ):
	
	this.KNOBS.bookmarks.setValues( [ DEFAULT_LABEL ] + brain.Search_and_Replace['names'] )
	
	
def onCreate( this ):
	
	_fill_bookmarks( this )	



def bookmarks( this ):
	
	value = this.VALUES.bookmarks
		
	this.KNOBS.label.setValue( value )
	
	if value == DEFAULT_LABEL:
		
		sf , rw = ( '' , '' )
	
	else:
		sf , rw = brain.Search_and_Replace( value , ( '' , '' ) , create_att = False )

	
	this.KNOBS.search_for.setValue( sf )
	this.KNOBS.replace_with.setValue( rw )
	
	this.KNOBS.info.setValue( '---' )


def replace( this ):
	
	if not this.VALUES.search_for:
		return
	
	which_nodes = this.VALUES.which_nodes
	
	if which_nodes == 'all':
		
		nodes = [ n for n in nuke.allNodes() if 'file' in n.knobs() ]
	
	elif which_nodes == 'selected':

		nodes = [ n for n in nuke.selectedNodes() if 'file' in n.knobs() ] 
	
	elif which_nodes == 'in_error':
		
		nodes = [ n for n in nuke.allNodes() if 'file' in n.knobs()  and n.hasError() ]
	
	
	
	
	replacements = 0
	
	for n in nodes:
		
		print 'DEBUG testing node %s' % n.name()
		
		fknob = n.knobs()['file']
		
		knobs = [ fknob ]
		
		if 'proxy' in n.knobs():
			
			knobs.append( n.knobs()['proxy'] )
		
		replaced = False
		
		for k in knobs:
			
			if this.VALUES.search_for in k.value():
				
				print '    DEBUG updating value %s' % k.name()
				
				k.setValue( k.value().replace( this.VALUES.search_for ,  this.VALUES.replace_with )  )
				
				replaced = True
		
		if replaced:
			
			replacements += 1
	
	
	this.KNOBS.info.setValue( '%s nodes modified' % replacements )
		 
		
		
		
		
		
		


