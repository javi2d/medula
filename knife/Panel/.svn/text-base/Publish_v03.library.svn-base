

# SHARED FILE OPERATIONS THREAD

def file_ops_thread( operation , base_target_folder  , overwrite = False ):
		
	taskbar = nuke.ProgressTask( 'Publish Copy' )
	
	import shutil
	import filecmp
	
	for node , container_folder , file_value , proxy_value , firstFrame , lastFrame in brain.Lib.selection.Reads():
		
		target_folder = Normalize.join( base_target_folder , container_folder )
		
		for i in range( firstFrame , lastFrame + 1 ):
			
			if taskbar.isCancelled():	
				return
			
			for path in [ file_value , proxy_value ]:
			
				src_file = brain.Lib.path.frame_path( path , i )

				if src_file and os.path.isfile( src_file ):
					
					src_basename =  os.path.basename( src_file )

					trg_file = Normalize.join( target_folder , src_basename )
					
					src_tail = brain.Lib.path.tail( src_file , 2 )
					trg_tail = brain.Lib.path.tail( trg_file , 2 )
					
					sh( target_folder )

					t = time.time()
					
					if os.path.isfile( trg_file ) and filecmp.cmp( src_file , trg_file ):
						
						msg = '%s == %s' % ( src_tail , trg_tail  )
						#print '>>' , msg
						taskbar.setMessage( msg )
					
					
					elif os.path.isfile( trg_file ) and  not filecmp.cmp( src_file , trg_file ):
						
						msg = '%s <> %s' % ( src_tail , trg_tail  )
						#print '>>' , msg
						taskbar.setMessage( msg )
						
						n = 0
						
						while 1:
							
							tmp_trg_file = trg_file + '.deletion_%04d' % n
							
							if not os.path.isfile( tmp_trg_file ):
								os.rename( trg_file , tmp_trg_file )
								break
						
						if operation== 'move' :
							
							try:
								
								os.rename( src_file , trg_file )	
							
							except OSError:
								
								operation = 'copy'
						
						if operation == 'copy':

							shutil.copy( src_file , trg_file )		
							
					else:
						
						msg = '%s >> %s' % ( src_tail , trg_tail  )
						
						#print '>>' , msg
						taskbar.setMessage( msg )
						

							
						if operation== 'move' :
							
							try:

								os.rename( src_file , trg_file )	

							except OSError:

								operation = 'copy'
						
						if operation == 'copy':

							shutil.copy( src_file , trg_file )
					
					

					
					#print operation , src_file , trg_file , time.time() - t
				
				 
				current_frame = i-firstFrame + 1
				total_frames  = lastFrame-firstFrame + 1
				
				taskbar.setProgress( current_frame*100/total_frames )
		
		
		
		trg_ref_knob = node['target_reference']
		
		
		#target_file_path = Normalize.join( target_folder , os.path.basename(  file_value )	 )
		
		new_file_location = Normalize.join( target_folder , os.path.basename(  file_value ) )
		
		if operation == 'move':
			
			
			trg_ref_knob.setValue( os.path.dirname( file_value )  )
			
			node['file'].fromUserText( '%s %s-%s' % ( new_file_location , firstFrame , lastFrame ) )
			
			
			#node['file'].setValue( Normalize.join( target_folder , os.path.basename(  file_value ) ) )
			#
			#if node['proxy'].value():
			#	
			#	node['proxy'].setValue( Normalize.join( target_folder , os.path.basename(  proxy_value ) ) )
			
			print 'Moved and relinked'
					
		elif operation == 'copy':
			
			# source material is copied, file doesnt change 
			
			#target_copy_path = Normalize.join( target_folder , os.path.basename(  file_value ) )
			
			node['target_reference'].setValue( new_file_location )
					
			print 'Copied to' , new_file_location
			
		
		node.redraw()
		
		



