
#brain.Lib.script = sh.Lib.script()

Class = 'Group'


#NODE.label = '<font size=10 color="green">INSPECTOR</font></p>'


class Script_Inspector:
	
	inspect_all             = bttnKnob( '<b>all</b>'  )
	inspect_all_history     = bttnKnob( '<b>all history</b>'  )
	inspect_script_history  = bttnKnob( '<b>script history</b>'  )
	inspect_render          = bttnKnob( '<b>render</b>'  )
	
	
	sep1     = sepKnob()
	
	path    = fileKnob( '' , '')
	
	pattern = strKnob( '' , '*.nk' )
	
	sep2     = sepKnob()
	
	
	recursive  = boolKnob( 'scan folder recursively' , True , flags = 'STARTLINE' )
	
	scan  = bttnKnob( '<b>SCAN</b>'  , flags = 'STARTLINE' )
	

	
	
	files   = enumKnob( '' , [ ' '*200 ] , clearflags = 'STARTLINE')
	
	load   = bttnKnob( '<b>L</b>' )
	
	prev    = bttnKnob( '<b>&#60;</b>' )
	next    = bttnKnob( '<b>&#62;</b>' )
	
	sep3     = sepKnob()
	
	last    = txtKnob( '' , ' ' )




def onCreate( this ):
	
	
	this.KNOBS.path.setValue( this.UNIT_PATH )
	



def inspect_all( this ):

	this.KNOBS.path.setValue( this.UNIT_PATH )
	this.KNOBS.pattern.setValue( '*.nk' )
	
	scan( this )
	
	if this.KNOBS.files.values():

		this.KNOBS.files.setValue( this.KNOBS.files.values()[-1] )


def inspect_all_history( this ):

	this.KNOBS.path.setValue( this.UNIT_PATH + '/nuke/_historyScripts/' )
	
	this.KNOBS.pattern.setValue( '*.nk' )
	
	this.KNOBS.recursive.setValue( True )
	
	if this.KNOBS.files.values():

		this.KNOBS.files.setValue( this.KNOBS.files.values()[-1] )
	
	

def inspect_script_history( this ):
	
	this.KNOBS.path.setValue( this.UNIT_PATH + '/nuke/_historyScripts/' )
	
	pattern = '*.nk'
	
	if this.SCRIPT_NAME:
		
		broken = this.SCRIPT_NAME.split('_')
		
		reconstructed = []
		
		for item in broken:
			
			if not item[0].isdigit() and item[1:].isdigit():
				
				reconstructed.append( '%s*' % item[0] )
			
			else:
				
				reconstructed.append( item )
				
				
		pattern = '*%s' % '_'.join( reconstructed )
				
				
	this.KNOBS.pattern.setValue( pattern )
	
	this.KNOBS.recursive.setValue( True )
	
	scan( this )
	
	if this.KNOBS.files.values():

		this.KNOBS.files.setValue( this.KNOBS.files.values()[-1] )
	





def inspect_render( this ):
	
	inspector_node = this.NODE

	nuke.Root().begin()

	selected_nodes = nuke.selectedNodes()

	nuke.Root().end()

	this = this( inspector_node )

	if len( selected_nodes ) == 1 and selected_nodes[0].Class() == 'Read':

		render_name = os.path.basename( selected_nodes[0]['file'].value() ).split('.')[0]
		
		this.KNOBS.path.setValue( this.UNIT_PATH + '/nuke/_renderScripts/' )
		
		this.KNOBS.pattern.setValue( '*%s.nk' % render_name )

		this.KNOBS.recursive.setValue( True )

		scan( this )

		if this.KNOBS.files.values():

			this.KNOBS.files.setValue( this.KNOBS.files.values()[-1] )

	else:

		this.KNOBS.files.setValues([])

		this.KNOBS.last.setValue( '<font size=3 color="red">WARNING: Select a Read Node to inspect source script</font></p>' )







	


def scan( this ):
	
	
	print 'DEBUG scanw button'
	
	import glob
	

	base_path = brain.Lib.path.normalize( this.VALUES.path )
	pattern   = brain.Lib.path.normalize( this.VALUES.pattern )
	
	this.KNOBS.pattern.setValue( pattern )
	
	if base_path.endswith('/'):
		
		base_path = base_path[:-1]
		this.KNOBS.path.setValue( base_path )
	
	
	if pattern.startswith('/'):

		pattern = pattern[1:]
		this.KNOBS.pattern.setValue( pattern )
	
	
	import fnmatch
	
	all_matches = []

	for P,D,F in os.walk( base_path ):	
		
		
		
		
		glob_pattern = '%s/%s' % ( brain.Lib.path.normalize( P ) , pattern  )
		
		matches = glob.glob( glob_pattern )
		
		matches = [ brain.Lib.path.normalize( m )  for  m  in matches ]
		
		matches = [ '...' + m[ len( base_path ): ] for m in matches if os.path.isfile( m )]
		
		
		all_matches.extend( matches )

		if not this.VALUES.recursive:

			break

	
	if all_matches:
	
		this.KNOBS.files.setValues( all_matches )

		current_value = this.VALUES.files
		
		if current_value in all_matches:
		
			index = all_matches.index( current_value )
		
		else:
			
			index = len( all_matches )
		

		if this.KNOB == this.KNOBS.next:

			index += 1

			this.KNOBS.files.setValue( 0 if  index == len( all_matches )  else index  )


		elif this.KNOB == this.KNOBS.prev:

			index -= 1

			this.KNOBS.files.setValue( len( all_matches ) - 1  if index == -1  else index   )

		this.KNOBS.last.setValue( 'SCAN RESULT : %s files matching pattern' % len( all_matches ) )
		
		
	else:
		
		this.KNOBS.files.setValues([])
		
		this.KNOBS.last.setValue( 'WARNING: No matches with current pattern' )
		

	

def load_file( this ):
	
	path = Normalize.join( this.VALUES.path , this.VALUES.files[4:]	)
	
	if this.PARENT.Class() == 'Root' and path:
		
		this.KNOBS.last.setValue( os.path.basename( path ) )
		
		this.NODE.begin()
		
		for node in this.NODE.nodes():
			
			nuke.delete( node )
		
		#print 'DEBUG LOAD FILE' , path
		
		#return
		
		#import shutil
		
		#target_temp_file = sh( brain.Project.DEFAULT_RESOURCE )( '__tmp' )['$PATH'] + '/inspector.nk'
		
		#print 'DEBUG LOAD FILE' , target_temp_file
		
		#shutil.copy( path ,  target_temp_file )
		
		#nuke.scriptReadFile( target_temp_file )
		
		nuke.scriptReadFile( path )

		for node in this.NODE.nodes():
					
			if node.Class() == 'Viewer':
				
				node.setName( '%s_Viewer' % this.NODE.name() )
				
			if node.Class() == 'Group' and 'Script_Inspector' in node.knobs() :
				
				nuke.delete( node )
		

		allNodes = nuke.allNodes()
		
		bdX = -100 + min([node.xpos() for node in allNodes]) 
		bdY = -100 + min([node.ypos() for node in allNodes]) 
		bdW = 100 + max([node.xpos() + node.screenWidth() for node in allNodes]) - bdX 
		bdH = 100 + max([node.ypos() + node.screenHeight() for node in allNodes]) - bdY 
		
		
		import random
		
		color_range = range( 100 , 255 )
		
		hex_color = '%02x%02x%02x' % ( random.choice( color_range ) , random.choice( color_range ) , random.choice( color_range ) )
		
		tile_color = int( hex_color , 16 )
		
		n = nuke.nodes.BackdropNode(xpos = bdX, 
		                            bdwidth = bdW, 
		                            ypos = bdY, 
		                            bdheight = bdH, 
		                            tile_color = tile_color, 
		                            note_font_size=42)
		
	
		
		this.NODE.end()
		
		
		

def load( this ):
	
	scan( this )
	load_file( this )
	
	
	

def prev( this ):
	
	scan( this )
	load_file( this )


def next( this ):
	
	scan( this )
	load_file( this )




			

def _script_general_pattern( script_path ):
	
	basename = os.path.splitext( os.path.basename( script_path ) )[0].split('_')
	
	if basename[-1].startswith( 's' ):
		
		basename.pop()
		
	return '*%s*' % '_'.join( basename )
	

def _find_nuke_folder():
	
	unit_path = this.UNIT_PATH
	
	return unit_path + '/nuke' 
	
	

	
	
	
	


		
	
	


		
			


	
			
		