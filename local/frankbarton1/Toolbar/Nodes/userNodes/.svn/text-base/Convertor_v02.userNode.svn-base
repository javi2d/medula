

Class = 'BackdropNode'


class Convertor:
	
	node_id = idKnob( 'Convertor' ) # id knobs are always hidden
	
	target = fileKnob('Target Folder' , '' )
	add_ref_write = bttnKnob('  Add Reference Write  ', flags  = 'STARTLINE')
	convert = bttnKnob('  Convert  ')
	
	# TODO : priority checkbox
	
	
class Read_Utils:
	
	on_error = enumKnob('missing frames' , ['error','black','checkerboard','nearest frame'])
	apply_to_all = bttnKnob('  Apply to all Reads  ' )


def onCreate( this ):
	
	this.KNOBS.label.setValue( 'CONVERTOR!!!!')
	this.KNOBS.note_font_size.setValue( 20 )
	this.KNOBS.bdheight.setValue( this.VALUES.bdheight + 100 )
	add_ref_write( this )


def _is_into_this_node( this ):
	
	# Get nodes contained into this backdrop
	pass
	


def add_ref_write( this ):
	
	nwrites = main.brain('userNodes.%s.writes' % this.VALUES.node_id , 0 )
	
	xpos = 10 + this.VALUES.xpos + ( 100 * nwrites )
	ypos = this.VALUES.ypos + this.VALUES.bdheight - 40
	
	if (xpos + 100) > ( this.VALUES.xpos + this.VALUES.bdwidth ) :
		
		return
	
	else:
		
		write = nuke.nodes.Write() #nuke.createNode('Write', inpanel = False)
		
		
		write.knobs()['file_type'].setValue('mov')
		write.knobs()['codec'].setValue('apcn')
		
		write.knobs()['label'].setValue( '[value file_type]' )
		
		write.addKnob( tabKnob( 'Convertor' ) )
		
		k = fileKnob( 'Local Target Path' , '' )
		k.setName('target_folder')
		
		write.addKnob( k )
	
		write.setXYpos( int(xpos), int(ypos) )
	
		main.brain('userNodes.%s' % this.VALUES.node_id ).writes += 1




def apply_to_all( this ):
	
	nodes = nuke.selectedNodes()
	
	reads = [ n for n in nodes if n.Class() == 'Read']
	
	
	for n in reads:
		
		n.knobs()['on_error'].setValue( this.VALUES.on_error )



def convert( this ):
	
	print 'HI'
	
	
	
	nodes = nuke.selectedNodes()
		
	images = [ n for n in nodes if n.Class() == 'FrameRange'] + [ n for n in nodes if n.Class() == 'Read' and not n.dependent() ]
	writes = [ n for n in nodes if n.Class() == 'Write']
	
	print '**', sorted( [ ( n.xpos() , n )  for n in images ] )
	
	images = [ j for i,j in sorted( [ ( n.xpos() , n )  for n in images ] ) ]
	
	
	for i in range( len(images)):
		
		n = images[i]
		print n.name() , n.frameRange()
	
	
	target_folder = ( this.VALUES.target or ( this.UNIT_PATH + '/Output/Convertor' ) )
	
	
	def getName( w , img ):
		
		read_node = img
		
		if img.Class() == 'FrameRange':
			
			read_node = img.dependencies()[0]
		
		
		file_path = read_node.knobs()['file'].value()
		
		dirname , basename = os.path.split( file_path )
		name , ext = os.path.splitext( basename )
		
		file_type = w.knobs()['file_type'].value()
		
		realname = name
		if file_type in ['mov']:
			realname = realname.split('%')[0]
			if realname.endswith('.'):
				realname = realname[:-1]
		
		realname = '%s.%s' % ( realname , file_type )
		
		return realname

		
		
	
	
	for w in writes:
		
		print '>> Processing Write :', w.name()
		
		for img in images:
				
			realname = getName( w, img )
			
			if 'target_folder' in w.knobs():
				
				target_folder = w.knobs()['target_folder'].value()
			
			if target_folder:
				
				fullname = Normalize.join( target_folder  , realname )
			else:
				fullname = Normalize.join( this.VALUES.target , realname )
			
			fullname = Normalize.path( fullname ) #.replace( '\\' , '/' )
			
			w.knobs()['file'].setValue( fullname )

			w.setInput(0, img)

			print '    >> writting Node to:' , fullname
			
			ff = img.firstFrame()
			lf = img.lastFrame() 
			
			if lf > ff:
				nuke.executeInMainThreadWithResult( nuke.execute , args = ( w , ff , lf) )
			
			else:
				nuke.executeInMainThreadWithResult( nuke.execute , args = ( w , lf , ff) )
				
				
			w.knobs()['file'].setValue( '' )
			w.setInput(0, None)



	print 'Done Processing...'
			
	
	


	
	