



class Management:
	
	wm_category  = enumKnob( '' ,  [] ) 

	wm_label      = strKnob( '' , 'Untitled_%s' % this.HOSTLABEL , clearflags = 'STARTLINE' )
	
	wm_ext = linkKnob( '' , 'file_type' , clearflags = 'STARTLINE')
	
	wm_colorspace  = linkKnob( '' , 'colorspace' , clearflags = 'STARTLINE')
	
	sep0   = sepKnob( ' ' )
	
	wm_channels    = linkKnob( '' , 'channels'  )
	

	sep1   = sepKnob()

	wm_folderize  = boolKnob( ' in folder' , True , flags = 'STARTLINE') #, flags = 'STARTLINE'
	wm_perversion  = boolKnob( ' per version' , True )
	wm_overwrite  = boolKnob( 'overwrite' , False )
	
	sep2 = sepKnob()
	
	wm_tree     = txtKnob( '' , '----'   )
	
	sep3 = sepKnob()
	
	wm_path_target = enumKnob( 'target'  , ['full' , 'both'] )  #, clearflags = 'STARTLINE' 
	
	wm_refresh = bttnKnob( 'refresh' )
	
	
	
	sep4 = sepKnob()
	
	wm_file_path = linkKnob( 'file' , 'file'  )
	
	wm_proxy_path = linkKnob( 'proxy' , 'proxy' )
	
	
	sep5 = sepKnob( ' ' )
	
	wm_render      = linkKnob( None , 'Render' , flags = 'STARTLINE')
	
	sep6 = sepKnob( ' ' )
	
	wm_user_path = strKnob( 'user' , '' , flags = 'INVISIBLE' )


DEFAULT_PARAMS = 'channels all colorspace linear file_type exr'


def onUserCreate( this ):
	
	print 'Newly created Node'


def onCreate( this ):

	
	current_value = this.VALUES.wm_category
	
	new_categories = list(  [ 'disabled' ] + main.brain( 'Categories' , None )['names']  )
	
	if not str(current_value).isdigit() and current_value not in new_categories:
		
		new_categories.append( current_value )
	
	
	if not this.KNOBS.wm_category.values() == new_categories:
		
		this.KNOBS.wm_category.setValues( new_categories )
		
		wm_category( this )
		


#*************************************************************************************************
# Last edited



def _isEnabled( this ):
	
	return ( False if this.VALUES.wm_category == 'disabled' else True )



def wm_category( this ):
	
	
	if not _isEnabled( this ):

		if this.VALUES.wm_user_path:
    
			this.KNOBS.file.fromScript( this.VALUES.wm_user_path )
			this.KNOBS.wm_user_path.setValue('')
	
	# Enable or Disable 
	
	for name in [ n for n in this.KNOBS['names'] if n.startswith('wm_') and not n == 'wm_category' ]:
    
		knob = this.KNOBS( name )	
		knob.setEnabled( _isEnabled( this ) )
		
	print 'DEBUG ::: wm_category'
	
	
def file_type( this ):
	
	if this.VALUES.file_type == 'jpeg' and this.VALUES._jpeg_quality == .75 :
		
		this.KNOBS._jpeg_quality.setValue( 1. )
			
	brain.Lib.mWrites.build_path( this )
	
	
	
def knobChanged( this ):
	
	if this.KNOB.name() in 'wm_category wm_label wm_folderize wm_perversion wm_overwrite wm_refresh wm_path_target'.split():
		
		print 'DEBUG ::: onKnobChanged' , this.KNOB.name()
		
		brain.Lib.mWrites.build_path( this )
		

def afterRender( this ):

	if not this.VALUES.wm_category == 'disabled':
		
		print 'Render Finished , updating file_knobs'
		
		brain.Lib.mWrites.build_path( this )

	


		


def autolabel( this ):

	#print 'DBG_Autolabel_Write Management'

	proxy_path =  nuke.tcl( 'value proxy' ) 
	file_path = nuke.tcl( 'value file' )
	proxy_mode = nuke.tcl( 'value root.proxy' )

	if proxy_mode == 'true':

		filename = nuke.tcl( 'value proxy' ) or nuke.tcl( 'value file' )

	else:

		filename = nuke.tcl( 'value file' ) or nuke.tcl( 'value proxy' ) 

	if _isEnabled( this ):
		
		label = this.VALUES.wm_category
		
		color = brain.Categories( '%s.color' % label , 'Green' )

		basename = os.path.basename( filename )

		asterisk = (  '*' if this.VALUES.wm_overwrite else '' )

		return '<center><font size=3>%s\n<b><font size=6 color= %s>%s%s</font>\n%s</b></font>\n(%s)</center>' % ( this.NODE.name() , color , label , asterisk , basename , this.VALUES.colorspace ) # 

	else:

		return None



	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


