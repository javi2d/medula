

		
		
		


class Facility:
	
	source_host = strKnob( 'source host' , '' )
	relink  = bttnKnob( 'relink' )
	restore = bttnKnob( 'restore' , flags = 'DISABLED')


def onScriptSave( this ):

	print '\n>> Script Saved'
	
	if nuke.Root().modified() : #and this.VALUES.psave_active
		
		brain.Lib.script.copyScript( '_historyScripts'  )	
		
		# If script is saved and unit is changed we need to change read node colors

		if not this.BRAIN( 'last_script_unit' , '' ) == this.UNIT_PATH:
			
			this.BRAIN.last_script_unit = this.UNIT_PATH
			
			# Reload Read Nodes Color
			
			for read_node in [ n for n in nuke.allNodes() if n.Class() == 'Read' ]:
				
				callbacks = brain.nodeScript.byClass['Read'].system_callbacks['onCreate']
				
				for cb in callbacks:
					
					cb( this( read_node ) )
						
			# Reload Write Node Targets folders
			
			for write_node in [ n for n in nuke.allNodes() if n.Class() == 'Write' ]:
			
				callbacks = brain.nodeScript.byClass['Write'].system_callbacks['onCreate']
				
				for cb in callbacks:
					
					cb( this( write_node ) )

			
		nuke.addFavoriteDir( '[ current_unit ]' , this.UNIT_PATH + '/' )
		


		
	


def onScriptLoad( this ):


	print '\n>> Script Loaded : < %s >' % this.SCRIPT_NAME
	
	this.BRAIN.last_script_unit = this.UNIT_PATH
	
	print '\n>> Redefining [ UNIT ] fav path to ../%s unit' %  this.UNIT_NAME
		
	nuke.addFavoriteDir( '[ UNIT ]' , this.UNIT_PATH + '/' )
	
	if not this.ROOT.VALUES.source_host == this.HOSTNAME:

		relink( this )
		



def relink( this ):
	
	source_host = this.ROOT.VALUES.source_host
	
	brain.Lib.sources.relink_read_nodes( knob = 'file' , source_host = source_host )
	brain.Lib.sources.relink_read_nodes( knob = 'proxy' , source_host = source_host )
	
	changes = brain( '_relink_changes' , [] )
	
	if changes:

		print '\n    >> %s knobs relinked' % len(changes)

		this.KNOBS.restore.clearFlag( nuke.DISABLED )

	else:

		print '\n    >> Nothing Relinked'
		

	
	

	
	
	

def restore( this ):

	for change in reversed( brain( '_relink_changes' , [] )  ):

		knob , new_file_value , old_file_value = change

		print '>> Restoring : %s.%s , %s' % ( knob.node().name() , knob.name() , new_file_value )

		knob.setValue( new_file_value )
	
	del this.BRAIN.relink_changes
	
	this.KNOBS.restore.setFlag( nuke.DISABLED )








