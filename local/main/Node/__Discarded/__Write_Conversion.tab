# Interface para manejar las autoconversiones


class Conversion:
	
	conv_target_folder = fileKnob( 'target folder' , '' )
	
	conv_sep = sepKnob(' ')

	conv_selected = bttnKnob( 'process selected' , flags = 'STARTLINE')


def conv_selected( this ):
	
	# also process autoproxy
	
	def threaded_processing( node ):
		
		this = space.this( node )
		
		if this.VALUES.file_type == ' ':
			
			this.ROOT.KNOBS.proxy.setValue( True )
			
		else:
			
			this.ROOT.KNOBS.proxy.setValue( False )
			
		
		def clear_values( this ):
			
			this.KNOBS.file.setValue('')
			this.KNOBS.proxy.setValue('')
			
		
		for node , auto_folder_name , file_value , proxy_value , firstFrame , lastFrame in brain.Lib.selection.Reads():
			
			
			clear_values( this )
			
			this.NODE.setInput(0, node)
			
			nuke.executeInMainThreadWithResult( nuke.execute , args = ( this.NODE , firstFrame , lastFrame ) , kwargs = { 'continueOnError' : True } )
			
			if this.VALUES.file:
			
				r = nuke.createNode( 'Read' , inpanel = False )
				
				if '%' in this.VALUES.file:
				
					this(r).KNOBS.file.fromUserText( '%s %s-%s' % ( this.VALUES.file ,firstFrame , lastFrame )  )
				
				else:
					
					this(r).KNOBS.file.fromUserText( this.VALUES.file )
				
				
				
				r.setXYpos( node.xpos() + 50 , node.ypos() + 50 )
				
				#r.fromScript( 'file %s first %s last %s xpos %s ypos %s' ( this.VALUES.file , firstFrame , lastFrame , this.NODE.xpos() + 50 ,  ) )
			

		clear_values( this )
		
		this.NODE.setInput(0, None)	
		
	

	import threading

	thread = threading.Thread( None , threaded_processing , args = ( this.NODE , )  )	
	
	#thread.start()
			
	nuke.executeInMainThread( thread.start  )
	
		



