			


def setCurrentHost():
	
	if 'source_host' in nuke.Root().knobs():
		
		this.ROOT.KNOBS.source_host.setValue( this.HOSTNAME )
		
		print '\nRoot.source_host = %s' % this.HOSTNAME
		

def safeSaveScript( script_path ):
	
	setCurrentHost( )

	try:

		nuke.scriptSave()

		print '\n>> Properly Saved Script\n'


	except RuntimeError:  # For a runtimeError File Must Exist

		# Increase subversion in case file is locked

		dirname , prefix , version , subversion = _split_script_path( script_path )

		while True:

			subversion += 1

			new_path = '%s/%s_%s_v%02d_s%02d.nk' % ( dirname , prefix , this.UNIT_NAME , version , subversion )

			#new_path = '%s/%s_v%02d_s%02d.nk' % ( dirname , prefix , version , subversion )

			if not os.path.exists( new_path ):

				nuke.scriptSaveAs( new_path )
				break

		# TODO Try to clean up all the old subversion scripts moving them under _script_subversions folder

		print '\n>> WARNING : No permission to save script, subversion upgraded\n'




def saveScriptAs():
	
	setCurrentHost( )
	
	default_path = this.SCRIPT_FOLDER + '/untitled_'   #( this.ROOT.VALUES.name or  DEFAULT_TARGET_PATH + '/untitled_' )
	
	script_path = nuke.getFilename( 'Save Script As...' , '*.nk' , default = default_path , type = 'save' )
	
	
	
	if not script_path:
		
		print '\n>> saveScriptAs Dialog Cancelled.\n'
		
		return

	else:
		
		script_path = script_path.strip()
		
		# ponemos el supuesto path en Root.name para que this resuelva correctamente la unidad
		
		this.ROOT.KNOBS.name.setValue( script_path )
		
	sh( os.path.dirname( script_path ) )
	
	
	dirname , prefix , version , subversion = _split_script_path( script_path )

	#print 'DEBUG SAVE SCRIPT AS' , prefix , version , subversion

	#return

	#if not( version and subversion ):

	while 1:

		subversion += 1

		script_path = '%s/%s_%s_v%02d_s%02d.nk' % ( dirname , prefix , this.UNIT_NAME , version , subversion )

		script_path = script_path.replace('__', '_')

		if not os.path.exists( script_path ):

			#print 'XXX' , script_path

			nuke.scriptSaveAs( script_path )

			print '\n>> Script Saved as:\n\n     ../nuke/%s\n' % script_path.split( '/nuke/' )[-1] 

			break




def saveScript():

	script_path = this.SCRIPT_PATH #nuke.tcl( 'value root.name' )

	if script_path:

		safeSaveScript( script_path )		

	else:

		saveScriptAs()

		#space['shell']('sopbox_Save_As.py')()	






def saveTemplateAs():


	if this.SELECTED_NODES:

		default_path = Normalize.join( ush( 'Template' )['$PATH']  , os.path.basename( this.UNIT_PROJECT_PATH )  , 'untitled_template'  )

		template_path = nuke.getFilename( 'Save Selection As Template ...' , '*.nk' , default = default_path   , type = 'save' )

		if template_path:
			
			template_path = template_path.strip()
			
			if not template_path.endswith( '.nk' ):

				template_path += '.nk'
			
			
			tfolder , tbasename = os.path.split( template_path )
			tname , text = os.path.splitext( tbasename )
			
			sh( tfolder )

			pattern_list = tname.split( '_' )
			
			last_item = pattern_list[-1]
			
			if last_item.startswith( 'v' ) and last_item[1:].isdigit():
				
				pattern_list[-1] = 'v%0' + str( len( last_item[1:] ) ) + 'd'
				
			else:
				
				pattern_list.append( 'v%02d' )
				
			pattern = '_'.join( pattern_list )
			
			version = 0
			
			while 1:

				version += 1

				test_path = Normalize.join( tfolder , pattern % version ) + text

				if not os.path.exists(  test_path  ):

					nuke.nodeCopy( test_path )

					break
			
			sh.init()		
			sh.menu()
			
			print '\n>> Saved template as:\n\n  ..%s\n' % brain.Lib.path.tail( test_path , 3 )
			
		else:

			print '\n>> Save as template operation cancelled by user.\n'

	else:

		print '\n>> Save as template operation cancelled , you need to select some nodes.\n'


		


def copyScript( folder , script_name = None , folderize = True ):	
	
	script_name = ( script_name or os.path.basename( this.ROOT.VALUES.name ) )
	
	#print 'DEBUG0 copyScript' , script_name
	
	
	
	basename , ext = os.path.splitext( script_name )
	
	#print basename
	
	unit_nuke_shell = sh( '%s/nuke' % this.UNIT_PATH  ) #space.unit_path()
	
	if folderize:
		
		target_folder =  unit_nuke_shell( '%s/%s' % (folder , basename) ).__path__ 
	
	else:
		
		target_folder =  unit_nuke_shell( folder ).__path__  # relativo siempre a unit/nuke folder
	
	import glob
	
	matches = glob.glob( '%s/*%s' % ( target_folder , script_name ) )
	
	index = 0
	
	if matches:
		
		last_item = sorted( matches )[-1]
		
		#print 'copyScript DEBUG2' , last_item 
		
		basename = os.path.basename( last_item )
		
		prefix = basename.split('_')[0]
		
		if prefix.isdigit():
			
			index = int( prefix )
			
	target_path = '%s/%04d_%s' % ( target_folder , index + 1 , script_name )
	
	if os.path.exists( this.ROOT.VALUES.name ) :
	
		import shutil
	
		shutil.copy( this.ROOT.VALUES.name , target_path  )
    
		main.brain.last_autosaved_script = target_path
		
		print '>> Script Backup:\n'
		
		print '          target folder : ../nuke/%s' % target_folder.split('/nuke/')[-1]
		print '            script name : ' , script_name
		
		
		return target_path
		
	else:
		
		main.brain.last_autosaved_script = ''
		
		return ''
		


	


	



def _split_script_path( script_path ):

	# This will work only in a proper script name

	dirname, basename = os.path.split( script_path ) 
	name , ext = os.path.splitext( basename ) 

	if name != this.UNIT_NAME:
		
		name = name.replace( this.UNIT_NAME , '' )
	
	#GET VERSION AND SUBVERSION

	version = 1
	subversion = 0

	prefix = []

	continue_prefix = True

	for item in [ x for x in name.split('_') if x ]:

		numeric_part = item[1:]

		if item.startswith('v') and numeric_part.isdigit():

			version = int( numeric_part )

			continue_prefix = False

		elif item.startswith('s') and numeric_part.isdigit():

			subversion = int( numeric_part )

			continue_prefix = False

		elif continue_prefix:

			prefix.append( item )


	prefix = '_'.join( prefix )

	return dirname , prefix , version , subversion





def _pattern_and_version( script_path , version_prefix = 'v' , name_prefix = '' ):	
	

	# This will return current version and pattern of script path

	dirname, basename = os.path.split( script_path ) 
	name , ext = os.path.splitext( basename )
	
	if name.startswith( name_prefix ):
		
		name = name.replace( name_prefix , '' , 1 )
		
	name = name.replace( this.UNIT_NAME , '' , 1 ) 
	
	#print '===' , name , 
	
	name_splitted = ( [ name_prefix ] if name_prefix else [] )
	
	version = None
	
	for item in name.split('_'):
		
		if not item:	
			pass
		
		elif item.startswith( version_prefix ) and item[1:].isdigit():
			
			name_splitted.append( this.UNIT_NAME )
			name_splitted.append( version_prefix + '%02d' )
			version = int( item[1:] )
			
		else:
			
			name_splitted.append( item )
	
	if version == None:
		
		version = 0
		basename	= '_'.join( name_splitted ) + '_%s_%s%s' % ( this.UNIT_NAME , version_prefix , '%02d.nk' )
	
	else:
		
		basename	= '_'.join( name_splitted ) + '.nk' 
		
	
	pattern = '%s/%s' % ( dirname , basename )
	
	return  pattern , version






	
	
	
	
	
			
		

	
