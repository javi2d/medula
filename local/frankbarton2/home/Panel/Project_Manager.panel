
class User:
	
	
	host_resource = enumKnob( '' , [] )
	#project = enumKnob( '' , [] , clearflags = 'STARTLINE' )
	
	route = strKnob( '' , '' , clearflags = 'STARTLINE' )
	
	choices = enumKnob( '' , [ '.' ] , clearflags = 'STARTLINE' )
	

	scripts = enumKnob( '' , [ ' '*300 ]  ) 
	
	versions = enumKnob( '' , [ ] , clearflags = 'STARTLINE' )
	
	#operations = enumKnob( '' , [  ] , clearflags = 'STARTLINE' )
	
	load = bttnKnob( 'load' )
	


def knobChanged( this ):

	_compute_choices( this )		
	
	_compute_scripts( this )
	
		
def onCreate( this ):
 	
	_compute_resources( this )

	_compute_choices( this )

		
		
def choices( this ):
	
	value = this.VALUES.choices
	
	route = this.VALUES.route
	
	if value == '..':
	
		this.KNOBS.route.setValue( os.path.dirname( route ) )
		
		
	elif value not in ['.' , '-']:
		
		this.KNOBS.route.setValue( sop.Normalize.join( route , value ) )


	this.KNOBS.choices.setValue( 0 )
	
	#_compute_choices( this )	
	





def _compute_scripts( this ):
	
	host_resource = this.VALUES.host_resource
	
	if '/' in host_resource:
		
		source_H , source_R = host_resource.split( '/' )
		
		route = this.VALUES.route
		
		found_scripts = []
		
		for H, R , path in brain.Lib.sources.alive_resources():
			
			if H == source_H and R == source_R:
			
				current_path = sop.Normalize.join( path , route )
				
				if os.path.exists( current_path ):
					
					found_scripts = sop.sh( current_path )['$FILE_NAMES *.nk']

					break
		
		
		print 'debug'

		this.KNOBS.scripts.setValues(  found_scripts  )
		
				
				



def _compute_choices( this ):
	
	# esto rellena choices basandonos en el path
	
	#project = this.VALUES.project
	
	host_resource = this.VALUES.host_resource
	
	if '/' in host_resource:
	
		target_H , target_R = host_resource.split( '/' )
	
		route = this.VALUES.route
		
		local_choices = []
		
		remote_choices = []
		
		for H, R , path in brain.Lib.sources.alive_resources():
			
			current_path = sop.Normalize.join( path , route )
			
			if H == target_H and R == target_R:

				if os.path.exists( current_path ):

					folders = sop.sh( current_path )[ '$FOLDER_NAMES' ]

					local_choices.extend( [ x for x in folders if x not in local_choices ] )
	
			else:

				if os.path.exists( current_path ):

					folders = sop.sh( current_path )[ '$FOLDER_NAMES' ]

					remote_choices.extend( [ x for x in folders if x not in local_choices + remote_choices  ] )
				
			
	
	DOTS = ( [ '.' , '..' ] if route else ['.'] )
		
	this.KNOBS.choices.setValues( DOTS + local_choices + ['-'] + remote_choices )

	
	
	

	

def _compute_resources( this ):
	
	resources = []
	
	for H, R , path in brain.Lib.sources.alive_resources():
		
		resources.append( '%s/%s' % ( H,R ) )
		
	this.KNOBS.host_resource.setValues( resources + ['-' , '@edit'] )



	

			


		
		
		
	

		
	
	
	
	