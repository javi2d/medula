
#print '\nDEBUG START EXEC FILE sh.Lib.solvers\n'


class userNodeSolver( Solver ):
	
	tag = 'userNode'
	targets = ['.userNode','.uNode']
	
	def __solve__(self):
		
		self.space.__UNODE__ , self.space.__NBRAIN__ = brain.Lib.userNodes3.solve( self.path )

		
class nodeSolver( Solver ):
	
	tag = 'node'
	targets = ['.node']
	
	def __solve__(self):
		
		self.space.__NBRAIN__ = brain.Lib.nodes7.solve( self.path )


class templateSolver( Solver ):
	
	tag = 'template'
	targets = ['.nk']
	
	def __solve__(self):
		
		group = nuke.createNode('Group')
		
		def create_nodes():
			
			nuke.scriptReadFile(self.path)
			
		group.run( create_nodes )
		
		self.space.__TEMPLATE__ = group.nodes()
		
		group.expand()



	
class panelSolver(Solver):

	tag = 'panel'
	targets = [ '.panel' ]

	def __solve__(self):
		
		
		self.space.__PANEL__ = brain.Lib.panel3.Dynamic_Panel( self.path )
		
		self.space.__NBRAIN__ = self.space.__PANEL__.nbrain
		
		self.space.__PANEL__.show()
		
		
		
	

class gizmoSolver(Solver):
	
	tag = 'gizmo'
	targets = [ '.gizmo' ]
	
	def __solve__(self):
				
		nuke.pluginAddPath( self.dirname )
			
		try:
			self.space.__GIZMO__ = nuke.createNode( self.name + self.ext )
			self.space.__GIZMO__.setName(self.name)
		
		except RuntimeError:
			
			print 'Gizmo [ %s ] cannot be loaded, hard reload nuke to make it available.' % self.name + self.ext
			


class pythonSolver(Solver):

	tag = 'python/marshal'

	targets = [ '.py', '.pyc', '.pyo', '.marshal' ]

	def __solve__(self):
		
		Core.execution( self.path , self.space)
		main.LAST_EVALUATED_SCRIPT = self.path
		
	
		
class commandSolver(Solver):

	tag = 'cmd'
	targets = [ '.cmd' ]

	def __solve__(self):

		Core.execution( self.path , self.space)
		main.LAST_EVALUATED_SCRIPT = self.path
		

		
class plaintextSolver(Solver):
	
	tag = 'plaintext'
	targets = [ '.txt' ]
	
	def __solve__(self):
		
		f = open(self.path)
		text = f.readlines()
		f.close()
		
		self.space.__PLAINTEXT__ = text


brain.Flow[:] = [  plaintextSolver, gizmoSolver, templateSolver, nodeSolver, panelSolver, userNodeSolver , pythonSolver , commandSolver ]

		
		