
import urllib2


def lib_compare_versions():
	
	class defaultVersion:
		
		major_version = 0
		minor_version = 0

		changeLog = ''
	
	local_medula_version = ( Brain() << defaultVersion ) << medula( 'version.memory' )
	
	try:
	
		github_medula_version = urllib2.urlopen( 'https://github.com/javi2d/medula/raw/master/version.memory' ).read()
	
	except:
		
		nuke.executeInMainThreadWithResult( nuke.message , 'Connection to github failed, sorry' )
		
		return
	
	github_version_memory = medula( 'versions/downloads/github_version.memory' )
		
	github_version_memory['rewrite']( github_medula_version )
	
	github_medula_version = Brain() << github_version_memory
	
	local_version = '%s.%s' % ( local_medula_version.major_version , local_medula_version.minor_version )
	
	github_version = '%s.%s' % ( github_medula_version.major_version , github_medula_version.minor_version )
	
	changelog = github_medula_version.changeLog
	
	return ( local_version , github_version , changelog ) # current version , github version , changelog



def lib_download_and_unzip_master_branch():
	
	
	downloads_path = medula( 'versions/downloads' )['$PATH']
	
	try:
	
		distro = urllib2.urlopen( 'https://github.com/javi2d/medula/zipball/master' )
	
	except:
		
		nuke.executeInMainThreadWithResult( nuke.message , 'Connection to github failed, sorry' )
		
		return False
	
	target_local_zip_file = Normalize.join(  downloads_path , 'medula_current.zip' )
		
	with open( target_local_zip_file , 'wb' ) as mzip:
		
		mzip.write( distro.read() )

	import zipfile

	medula_zip = zipfile.ZipFile( target_local_zip_file )

	medula_zip.extractall( downloads_path )

	medula_unzipped_folder = Normalize.path( medula_zip.namelist()[0] ).split('/')[0]
	
	return sh( downloads_path )( medula_unzipped_folder )
	
	
def lib_switch_versions( new_medula_version_shell , backup_shell ):
	
	if 'medula.source' in medula( '..' )['$FILE_NAMES']:

		nuke.executeInMainThread( nuke.message , ( 'Source Distro cannot be updated' ) )
		
		return

	import shutil
	
	for folder in [ d for d in new_medula_version_shell['$FOLDER_NAMES'] if not d == 'local' ]:	
	
		if folder in medula['$FOLDER_NAMES']:
		
			shutil.move( medula( folder )['$PATH'] , backup_shell['$PATH'] )
	
		shutil.move( new_medula_version_shell( folder )['$PATH'] , medula['$PATH'] )
	
	for filename in new_medula_version_shell['$FILE_NAMES']:
	
		if filename in medula['$FILE_NAMES']:
		
			shutil.move( medula( filename )['file'] , backup_shell['$PATH'] )
	
		shutil.move( new_medula_version_shell( filename )['file'] , medula['$PATH'] )



	
	