
DOTS = [ '.' , '..' ]

html = brain.Lib.html

space << '_03_Brain_Browser.library' #( space['name'] + '.library' )

class User:
	
	#class Brain_Browser:
	
	update = bttnKnob( 'update' )
	
	brains = enumKnob( '' , [ 'brain' ] , clearflags = 'STARTLINE' )

	route = strKnob( '' , '' , clearflags = 'STARTLINE' )

	browser = enumKnob( '' , [] , clearflags = 'STARTLINE' )

	sep0 = sepKnob( ' ' )
	
	only_values = boolKnob( 'show only values' , False , flags = 'STARTLINE' )
	
	truncate = boolKnob( 'truncate values' , True )
	
	editable = boolKnob( 'show in textbox' , False )
	
	sep1 = sepKnob( ' ' )
	
	result_txt = txtKnob( '' , ' '  )
	
	result_box = txtboxKnob( '' , ' '  ) 



def _dump_preset( this ):
	
	return 
	
	# DONT APPLY ONLY FOR CODE MAINTENANCE
	
	target = None
	
	if brain( 'toolsets' , [] ):
		
		target = brain.toolsets[0][0]

	
	if target:
	
		preset_knobs = 'brains route only_values truncate editable'.split()
		
		presets = brain( 'Brain_Browser' , sop.Brain() )
	
		for knob_name in preset_knobs:
		
			presets( knob_name , this.VALUES( knob_name ) , replace_att = True )

		presets >> target( 'Brain/Brain_Browser.memory' )
		
		
	else:
		
		print 'WARNING ! No toolsets have loaded'

	
def _load_preset( this ):
	
	return 
	
	# DONT APPLY ONLY FOR CODE MAINTENANCE
	
	presets = brain( 'Brain_Browser' , sop.Brain() )
	
	for att, value in presets['items']:
		
		if att in this.KNOBS['names']:
			
			this.KNOBS( att ).setValue( value )
		
	

def knobChanged( this ):
	
	_update_result( this )
	
	_dump_preset( this )



def update( this ):
	
	#sop.Core.thread( nuke.executeInMainThreadWithResult , this.PANEL.show ).start()
	
	onCreate( this )
	
	
def editable( this ):
	
	value = this.VALUES.editable
		
	this.KNOBS.result_txt.setVisible( not value )
	this.KNOBS.result_box.setVisible( value )

		
	

def _type( obj ):
	
	return type( obj ).__name__


def _active_brain( this  ):
	
	active_brain = dict( sop.Core.brains( sop.Namespace ) )[ this.VALUES.brains ]
	
	#active_brain = getattr( sop , this.VALUES.brains )

	current_brain = active_brain( this.VALUES.route , None , create_att = False )
	
 	return current_brain

		

def _update_result( this ):
	
	current_brain = _active_brain( this )
	
	if current_brain:

		for kname in [ n for n in this.KNOBS['names'] if n.startswith( 'result' ) ]:
	
			if not current_brain:

				this.KNOBS( kname ).setValue( '\nINVALID ROUTE' )	

			else:
		
				this.KNOBS( kname ).setValue( ''.join( _brain_lines( this ) ) )
	
		brains = [ b for b in current_brain['names'] if _type( getattr( current_brain , b ) ) == 'Brain' ]
		
		this.KNOBS.browser.setValues( DOTS + brains  )
		
	else:
		
		this.KNOBS.browser.setValues( [] )
	
	
def onCreate( this ):
	
	this.KNOBS.result_box.setVisible( False )
	
	#brains = [ b for b in dir( sop ) if type( getattr( sop , b ) ).__name__ == 'Brain' ]
	
	brains = [ x[0] for x in sop.Core.brains( sop.Namespace ) ]
	
	this.KNOBS.brains.setValues( brains )
	
	_load_preset( this )
	
	_update_result( this )
	
	
	

def browser( this ):
	
	value = this.VALUES.browser
	
	route_value = this.VALUES.route
	
	if value == '.':
		
		pass
	
	elif value == '..':
		
		this.KNOBS.route.setValue( '.'.join( route_value.split( '.' )[:-1] ) )
		
		this.KNOBS.browser.setValue( '.' )
		
	else:
		
		new_route = value 
		
		if route_value:
		
			new_route = '%s.%s' % ( route_value , value )
		

		this.KNOBS.route.setValue(  new_route  )
		
		this.KNOBS.browser.setValue( '.' )











	


	
	
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	