


class User:

	update = bttnKnob( 'update medula' )
	
	sep2 = sepKnob( '  or restore a backup ( if any )', clearflags = 'STARTLINE')
	
	sep3 = sepKnob( ' ' )
	
	in_backup_versions = enumKnob( '' , []  )
	
	backup_info = txtKnob( '' , '---' )
	
	restore = bttnKnob( 'restore backup' )
	

def in_backup_versions( this ):
	
	value = this.VALUES.in_backup_versions
	
	if value == '...':
		
		this.KNOBS.backup_info.setValue( '---' )
		
	else:
		
		selected_shell = medula.versions( value )
		
		version_info_brain = Brain() << selected_shell( 'version.memory' )
		
		version_info = '%s.%s' % ( version_info_brain( 'major_version' , 0 ), version_info_brain( 'minor_version' , 0 ) )
		
		msg = '''
Version Info   : %s 

Folder Content : %s

''' % (  version_info , selected_shell['$FOLDER_NAMES'] + selected_shell['$FILE_NAMES']   )
	
		this.KNOBS.backup_info.setValue( msg )
	

	

# extend space code with code defined in .library file, .library is ['exec'] 'uted 

space << '_05_Update_Medula.library'


new_version_ask_msg = '''

A new version is available:

current medula version : %s

github medula version  : %s

changeLog : 

%s

Do you want to update medula?

'''

update_done_ok_msg = '''

Update sucessfully done

Structural changes are stored in %s folder:

Changed folders = %s

Changed files = %s

Restart nuke to apply changes.

'''


def onCreate( this ):
	

	in_backup = ['...'] 

	if 'versions' in medula['$FOLDER_NAMES']:

		in_backup.extend(  [ d for d in medula( 'versions' )['$FOLDER_NAMES'] if d.startswith( 'Medula_' ) ]    )
		
	this.KNOBS.in_backup_versions.setValues( in_backup )






def update( this ):
	
	comparative = lib_compare_versions()
	
	if comparative:
		
		local_ver , github_ver , changelog = comparative
		
		if local_ver == github_ver:
			
			def ask():

				brain.tmp.updater.do_update = nuke.ask( 'Medula is up to date, update again?' ) 

			nuke.executeInMainThreadWithResult( ask )
		
		else:
			
			def ask():

				brain.tmp.updater.do_update = nuke.ask( new_version_ask_msg % ( local_ver , github_ver , changelog ) ) 

			nuke.executeInMainThreadWithResult( ask )
		
		
		
		if brain.tmp.updater.do_update:
			
			unzipped_shell = lib_download_and_unzip_master_branch()
			
			backup_shell = medula.versions( 'Medula_Update_Backup_at_' + time.asctime().replace( ':' , '_' ).replace( ' ' , '_' ) )
	
			lib_switch_versions( unzipped_shell , backup_shell )
				
			nuke.executeInMainThreadWithResult( nuke.message , ( update_done_ok_msg % ( backup_shell['$NAME'] , backup_shell['$FOLDER_NAMES'] , backup_shell['$FILE_NAMES'] ) ,  ) )
			
			onCreate( this )
			
	
	return 



def restore( this ):
	
	value = this.VALUES.in_backup_versions
	
	if value == '...':
		
		nuke.message( 'Please select a backup to restore, if any' )
		
		return
	
	backup_folder_name = 'Medula_Restored_Backup_at_' + time.asctime().replace( ':' , '_' ).replace( ' ' , '_' )

	if nuke.ask( 'Are you sure to restore %s backup? Current version will be backup into %s' % ( value , backup_folder_name  ) ):
		
		lib_switch_versions( medula.versions( value ) , sh( Normalize.join( medula.versions['$PATH'] , backup_folder_name  ) )  )

	nuke.message( 'Restart nuke to complete the restore process' )


