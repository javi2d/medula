

'''
Create new tool or open existing
'''

BRAIN = sop.tmp( 'Medula_Tool_Manager' , sop.sop.Brain() )

_tmp_full_structure =  ','.join( brain.Lib.include.FULL_STRUCTURE )

_tmp_toolbar_structure = ','.join( [ 'Toolbar' ] + [ 'Toolbar/%s' % x for x in brain.Lib.include.TOOLBAR_STRUCTURE ] )

_tmp_complete_structure = '.,' + _tmp_full_structure.replace( 'Toolbar' , _tmp_toolbar_structure )


PRESETS = [ x.strip() for x in _tmp_complete_structure.split(',') ]


class Tools:
	
	#mode = enumKnob( 'mode', [ 'open' , 'new' ] , clearflags = 'STARTLINE' )
	#sep = sepKnob()
	
	toolset = enumKnob( '' , [] )
	
	presets = enumKnob( '' , PRESETS , clearflags = 'STARTLINE' )
	
	#route = strKnob( '' , '' , clearflags = 'STARTLINE')
	
	#folders = enumKnob( '' , [] , clearflags = 'STARTLINE')
	
	mode = enumKnob( '', [ 'browse' , 'open' ] , clearflags = 'STARTLINE' )
	
	tools = enumKnob( '' , [ ' ' ] , clearflags = 'STARTLINE' )
	
	
	
	tool_path = strKnob( '' , '' , clearflags = 'STARTLINE' )
	
	edit = bttnKnob( 'edit' ) 
	
	ops_sep = sepKnob( '' , 'operations' )
	
	code = txtKnob( ''  , ' NO CODE ' )
	
	#edit = enumKnob( 'edit' )

	#launch = enumKnob( 'launch' )



def onCreate( this ):

	_scan_tools( this )
	mode( this )
	
	
	this.NODE.addKnob(nuke.BeginTabGroup_Knob()) 
	
	tab = nuke.Tab_Knob( "OK" )

	this.NODE.addKnob( tab )
	
	tab.setVisible( False )
	
	this.NODE.addKnob( nuke.Script_Knob( "OK" ) )
	
	this.NODE.addKnob(nuke.EndTabGroup_Knob()) 


def _solve_tool_path( this ):
	
	toolset = _toolsets().dict[ this.VALUES.toolset ]
	
	tool_path = sop.Normalize.join( toolset['$PATH'] , this.VALUES.presets , this.VALUES.tool_path )
	
	return tool_path
	
	




def edit( this ):
	
	tool_path = _solve_tool_path( this )
	
	sop.sh( tool_path )
	
	cmd = None

	if sys.platform == 'darwin':
	    cmd = 'open ' + tool_path
	elif sys.platform == 'nt':
	    cmd = 'start ' + tool_path
	elif sys.platform == 'posix':
	    cmd = 'xdg-open ' + tool_path
	
	if cmd:
	
		os.system( cmd  )
	
	else:
		
		raise RuntimeError, 'not supported system'
	
	


def open_tool( this ):
	
	pass



def mode( this ):
	
	mode_value = ( this.VALUES.mode == 'browse' )
		
	this.KNOBS.tools.setVisible( mode_value )
		
	this.KNOBS.tool_path.setVisible( not mode_value )
	
	if this.VALUES.toolset == '*' and this.VALUES.mode == 'open':
		
		this.KNOBS.mode.setValue( 'browse' )
		
		mode( this )
	
	
	



def _toolsets():
	
	self = _toolsets
	
	self.items = [ ( item[0]['$NAME'] , item[0] ) for item in brain.toolsets ]
	
	self.toolsets = [ item[1] for item in self.items ]
	
	self.names = [ item[0] for item in self.items ]
	
	self.dict = dict( self.items )
	
	return self



def _scan_tools( this ):
	
	this.KNOBS.toolset.setValues(  _toolsets().names )  #[ '*' ] +
	
	if this.VALUES.toolset == '*':
		
		toolsets =  _toolsets().toolsets
		
	else:
		
		toolsets = [ _toolsets().dict[ this.VALUES.toolset ] ]
	
	tools = []
	
	for ts in toolsets:
			
		shell = ts( this.VALUES.presets )
		
		tools.extend( shell._[ '$TAILS' ] )
	
		
	tools = [ x for x in tools if not x.endswith( '.memory' ) ]
	
	
	# update tools enum
	this.KNOBS.tools.setValues( tools )
	
	
	# put browse selection into tool_path
	if not this.KNOB == this.KNOBS.tool_path :
		
		tools_value = this.VALUES.tools 
		
		if not  tools_value.isdigit():

			this.KNOBS.tool_path.setValue( tools_value )
		
	# Update code
	tool_path = _solve_tool_path( this )

	if os.path.isfile( tool_path ):

		this.KNOBS.code.setValue( sop.sh( tool_path )['read'] )

	else:

		this.KNOBS.code.setValue( 'file not exists' )
	
	
	
	
def knobChanged( this ):
	
	_scan_tools( this )
	

	
	
	

		
	
def load( this ):
	
	pass
	